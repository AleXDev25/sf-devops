pipeline {
    agent any
    stages {
        stage('Build docker container') {
            steps {                
                sh 'docker build -t my-nginx ./PW8'
            }
        }
        stage('Run docker container') {
            steps {
                sh 'docker run -dp 9889:80 my-nginx'                
            }
        }
        stage('Check status code') {
            steps {
                sh 'echo HTTP status code: $(curl -o /dev/null -s -w "%{http_code}\\n" http://localhost:9889)'
            }
        }
        stage('Compare md5') {
            steps {
                dir('PW8') {
                    sh 'md5sum index.html > index.md5'
                    sh 'rm index.html'
                    sh 'wget -H http://localhost:9889/index.html'
                    sh 'md5sum -c index.md5'    
                }
            }
        }
        stage('Delete docker containers') {
            steps {
                sh 'docker rm -f $(docker ps -q)'
                sh 'docker rmi -f $(docker images -q)'
            }
        }
    }
    post{
        success{
            withCredentials([string(credentialsId: 'TELE_TOKEN', variable: 'TOKEN'), string(credentialsId: 'chat_ID', variable: 'CHAT_ID')]) {
                sh  ("""
                curl -s -X POST https://api.telegram.org/bot${TOKEN}/sendMessage -d chat_id=${CHAT_ID} -d parse_mode=markdown -d 
                text='Job: *${env.JOB_NAME}*%0A*Branch*: ${env.GIT_BRANCH}%0A*Status* : `OK`'
                """)
            }
        }
        failure{
            withCredentials([string(credentialsId: 'TELE_TOKEN', variable: 'TOKEN'), string(credentialsId: 'chat_ID', variable: 'CHAT_ID')]) {
                sh  ("""
                curl -s -X POST https://api.telegram.org/bot${TOKEN}/sendMessage -d chat_id=${CHAT_ID} -d parse_mode=markdown -d 
                text='*${env.JOB_NAME}* : POC  *Branch*: ${env.GIT_BRANCH} *Build* : `not OK` *Published* = `no`'
                """)
            }
        }        
    }
}